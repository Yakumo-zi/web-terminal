// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/asset"
	"github.com/Yakumo-zi/web-terminal/ent/credential"
	"github.com/Yakumo-zi/web-terminal/ent/predicate"
	"github.com/google/uuid"
)

// CredentialUpdate is the builder for updating Credential entities.
type CredentialUpdate struct {
	config
	hooks    []Hook
	mutation *CredentialMutation
}

// Where appends a list predicates to the CredentialUpdate builder.
func (cu *CredentialUpdate) Where(ps ...predicate.Credential) *CredentialUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUsername sets the "username" field.
func (cu *CredentialUpdate) SetUsername(s string) *CredentialUpdate {
	cu.mutation.SetUsername(s)
	return cu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableUsername(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetUsername(*s)
	}
	return cu
}

// SetSecret sets the "secret" field.
func (cu *CredentialUpdate) SetSecret(s string) *CredentialUpdate {
	cu.mutation.SetSecret(s)
	return cu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableSecret(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetSecret(*s)
	}
	return cu
}

// SetType sets the "type" field.
func (cu *CredentialUpdate) SetType(s string) *CredentialUpdate {
	cu.mutation.SetType(s)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableType(s *string) *CredentialUpdate {
	if s != nil {
		cu.SetType(*s)
	}
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CredentialUpdate) SetCreatedAt(t time.Time) *CredentialUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableCreatedAt(t *time.Time) *CredentialUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CredentialUpdate) SetUpdatedAt(t time.Time) *CredentialUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cu *CredentialUpdate) SetNillableUpdatedAt(t *time.Time) *CredentialUpdate {
	if t != nil {
		cu.SetUpdatedAt(*t)
	}
	return cu
}

// SetAssetID sets the "asset" edge to the Asset entity by ID.
func (cu *CredentialUpdate) SetAssetID(id uuid.UUID) *CredentialUpdate {
	cu.mutation.SetAssetID(id)
	return cu
}

// SetNillableAssetID sets the "asset" edge to the Asset entity by ID if the given value is not nil.
func (cu *CredentialUpdate) SetNillableAssetID(id *uuid.UUID) *CredentialUpdate {
	if id != nil {
		cu = cu.SetAssetID(*id)
	}
	return cu
}

// SetAsset sets the "asset" edge to the Asset entity.
func (cu *CredentialUpdate) SetAsset(a *Asset) *CredentialUpdate {
	return cu.SetAssetID(a.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (cu *CredentialUpdate) Mutation() *CredentialMutation {
	return cu.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (cu *CredentialUpdate) ClearAsset() *CredentialUpdate {
	cu.mutation.ClearAsset()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CredentialUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CredentialUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CredentialUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CredentialUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CredentialUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Username(); ok {
		_spec.SetField(credential.FieldUsername, field.TypeString, value)
	}
	if value, ok := cu.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(credential.FieldType, field.TypeString, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(credential.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(credential.FieldUpdatedAt, field.TypeTime, value)
	}
	if cu.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.AssetTable,
			Columns: []string{credential.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.AssetTable,
			Columns: []string{credential.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CredentialUpdateOne is the builder for updating a single Credential entity.
type CredentialUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CredentialMutation
}

// SetUsername sets the "username" field.
func (cuo *CredentialUpdateOne) SetUsername(s string) *CredentialUpdateOne {
	cuo.mutation.SetUsername(s)
	return cuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableUsername(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetUsername(*s)
	}
	return cuo
}

// SetSecret sets the "secret" field.
func (cuo *CredentialUpdateOne) SetSecret(s string) *CredentialUpdateOne {
	cuo.mutation.SetSecret(s)
	return cuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableSecret(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetSecret(*s)
	}
	return cuo
}

// SetType sets the "type" field.
func (cuo *CredentialUpdateOne) SetType(s string) *CredentialUpdateOne {
	cuo.mutation.SetType(s)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableType(s *string) *CredentialUpdateOne {
	if s != nil {
		cuo.SetType(*s)
	}
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CredentialUpdateOne) SetCreatedAt(t time.Time) *CredentialUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableCreatedAt(t *time.Time) *CredentialUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CredentialUpdateOne) SetUpdatedAt(t time.Time) *CredentialUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableUpdatedAt(t *time.Time) *CredentialUpdateOne {
	if t != nil {
		cuo.SetUpdatedAt(*t)
	}
	return cuo
}

// SetAssetID sets the "asset" edge to the Asset entity by ID.
func (cuo *CredentialUpdateOne) SetAssetID(id uuid.UUID) *CredentialUpdateOne {
	cuo.mutation.SetAssetID(id)
	return cuo
}

// SetNillableAssetID sets the "asset" edge to the Asset entity by ID if the given value is not nil.
func (cuo *CredentialUpdateOne) SetNillableAssetID(id *uuid.UUID) *CredentialUpdateOne {
	if id != nil {
		cuo = cuo.SetAssetID(*id)
	}
	return cuo
}

// SetAsset sets the "asset" edge to the Asset entity.
func (cuo *CredentialUpdateOne) SetAsset(a *Asset) *CredentialUpdateOne {
	return cuo.SetAssetID(a.ID)
}

// Mutation returns the CredentialMutation object of the builder.
func (cuo *CredentialUpdateOne) Mutation() *CredentialMutation {
	return cuo.mutation
}

// ClearAsset clears the "asset" edge to the Asset entity.
func (cuo *CredentialUpdateOne) ClearAsset() *CredentialUpdateOne {
	cuo.mutation.ClearAsset()
	return cuo
}

// Where appends a list predicates to the CredentialUpdate builder.
func (cuo *CredentialUpdateOne) Where(ps ...predicate.Credential) *CredentialUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CredentialUpdateOne) Select(field string, fields ...string) *CredentialUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Credential entity.
func (cuo *CredentialUpdateOne) Save(ctx context.Context) (*Credential, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CredentialUpdateOne) SaveX(ctx context.Context) *Credential {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CredentialUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CredentialUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CredentialUpdateOne) sqlSave(ctx context.Context) (_node *Credential, err error) {
	_spec := sqlgraph.NewUpdateSpec(credential.Table, credential.Columns, sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Credential.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, credential.FieldID)
		for _, f := range fields {
			if !credential.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != credential.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Username(); ok {
		_spec.SetField(credential.FieldUsername, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Secret(); ok {
		_spec.SetField(credential.FieldSecret, field.TypeString, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(credential.FieldType, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(credential.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(credential.FieldUpdatedAt, field.TypeTime, value)
	}
	if cuo.mutation.AssetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.AssetTable,
			Columns: []string{credential.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AssetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   credential.AssetTable,
			Columns: []string{credential.AssetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Credential{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{credential.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
