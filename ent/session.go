// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Yakumo-zi/web-terminal/ent/asset"
	"github.com/Yakumo-zi/web-terminal/ent/credential"
	"github.com/Yakumo-zi/web-terminal/ent/session"
	"github.com/google/uuid"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// StopedAt holds the value of the "stoped_at" field.
	StopedAt *time.Time `json:"stoped_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges              SessionEdges `json:"edges"`
	session_asset      *uuid.UUID
	session_credential *uuid.UUID
	selectValues       sql.SelectValues
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// Credential holds the value of the credential edge.
	Credential *Credential `json:"credential,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// CredentialOrErr returns the Credential value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) CredentialOrErr() (*Credential, error) {
	if e.Credential != nil {
		return e.Credential, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: credential.Label}
	}
	return nil, &NotLoadedError{edge: "credential"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldStatus, session.FieldType:
			values[i] = new(sql.NullString)
		case session.FieldCreatedAt, session.FieldUpdatedAt, session.FieldStopedAt:
			values[i] = new(sql.NullTime)
		case session.FieldID:
			values[i] = new(uuid.UUID)
		case session.ForeignKeys[0]: // session_asset
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case session.ForeignKeys[1]: // session_credential
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case session.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case session.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				s.Type = value.String
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case session.FieldStopedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field stoped_at", values[i])
			} else if value.Valid {
				s.StopedAt = new(time.Time)
				*s.StopedAt = value.Time
			}
		case session.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field session_asset", values[i])
			} else if value.Valid {
				s.session_asset = new(uuid.UUID)
				*s.session_asset = *value.S.(*uuid.UUID)
			}
		case session.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field session_credential", values[i])
			} else if value.Valid {
				s.session_credential = new(uuid.UUID)
				*s.session_credential = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryAsset queries the "asset" edge of the Session entity.
func (s *Session) QueryAsset() *AssetQuery {
	return NewSessionClient(s.config).QueryAsset(s)
}

// QueryCredential queries the "credential" edge of the Session entity.
func (s *Session) QueryCredential() *CredentialQuery {
	return NewSessionClient(s.config).QueryCredential(s)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(s.Type)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.StopedAt; v != nil {
		builder.WriteString("stoped_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session
