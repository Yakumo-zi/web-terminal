// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/asset"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/Yakumo-zi/web-terminal/ent/credential"
	"github.com/Yakumo-zi/web-terminal/ent/predicate"
	"github.com/google/uuid"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetType sets the "type" field.
func (au *AssetUpdate) SetType(s string) *AssetUpdate {
	au.mutation.SetType(s)
	return au
}

// SetNillableType sets the "type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableType(s *string) *AssetUpdate {
	if s != nil {
		au.SetType(*s)
	}
	return au
}

// SetName sets the "name" field.
func (au *AssetUpdate) SetName(s string) *AssetUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableName(s *string) *AssetUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetIP sets the "ip" field.
func (au *AssetUpdate) SetIP(s string) *AssetUpdate {
	au.mutation.SetIP(s)
	return au
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (au *AssetUpdate) SetNillableIP(s *string) *AssetUpdate {
	if s != nil {
		au.SetIP(*s)
	}
	return au
}

// SetPort sets the "port" field.
func (au *AssetUpdate) SetPort(i int) *AssetUpdate {
	au.mutation.ResetPort()
	au.mutation.SetPort(i)
	return au
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (au *AssetUpdate) SetNillablePort(i *int) *AssetUpdate {
	if i != nil {
		au.SetPort(*i)
	}
	return au
}

// AddPort adds i to the "port" field.
func (au *AssetUpdate) AddPort(i int) *AssetUpdate {
	au.mutation.AddPort(i)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AssetUpdate) SetCreatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *AssetUpdate) SetNillableCreatedAt(t *time.Time) *AssetUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (au *AssetUpdate) SetNillableUpdatedAt(t *time.Time) *AssetUpdate {
	if t != nil {
		au.SetUpdatedAt(*t)
	}
	return au
}

// AddGroupIDs adds the "groups" edge to the AssetGroup entity by IDs.
func (au *AssetUpdate) AddGroupIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.AddGroupIDs(ids...)
	return au
}

// AddGroups adds the "groups" edges to the AssetGroup entity.
func (au *AssetUpdate) AddGroups(a ...*AssetGroup) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddGroupIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (au *AssetUpdate) AddCredentialIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.AddCredentialIDs(ids...)
	return au
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (au *AssetUpdate) AddCredentials(c ...*Credential) *AssetUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCredentialIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearGroups clears all "groups" edges to the AssetGroup entity.
func (au *AssetUpdate) ClearGroups() *AssetUpdate {
	au.mutation.ClearGroups()
	return au
}

// RemoveGroupIDs removes the "groups" edge to AssetGroup entities by IDs.
func (au *AssetUpdate) RemoveGroupIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.RemoveGroupIDs(ids...)
	return au
}

// RemoveGroups removes "groups" edges to AssetGroup entities.
func (au *AssetUpdate) RemoveGroups(a ...*AssetGroup) *AssetUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveGroupIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (au *AssetUpdate) ClearCredentials() *AssetUpdate {
	au.mutation.ClearCredentials()
	return au
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (au *AssetUpdate) RemoveCredentialIDs(ids ...uuid.UUID) *AssetUpdate {
	au.mutation.RemoveCredentialIDs(ids...)
	return au
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (au *AssetUpdate) RemoveCredentials(c ...*Credential) *AssetUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCredentialIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.IP(); ok {
		_spec.SetField(asset.FieldIP, field.TypeString, value)
	}
	if value, ok := au.mutation.Port(); ok {
		_spec.SetField(asset.FieldPort, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedPort(); ok {
		_spec.AddField(asset.FieldPort, field.TypeInt, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !au.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !au.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetType sets the "type" field.
func (auo *AssetUpdateOne) SetType(s string) *AssetUpdateOne {
	auo.mutation.SetType(s)
	return auo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableType(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetType(*s)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AssetUpdateOne) SetName(s string) *AssetUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetIP sets the "ip" field.
func (auo *AssetUpdateOne) SetIP(s string) *AssetUpdateOne {
	auo.mutation.SetIP(s)
	return auo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableIP(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetIP(*s)
	}
	return auo
}

// SetPort sets the "port" field.
func (auo *AssetUpdateOne) SetPort(i int) *AssetUpdateOne {
	auo.mutation.ResetPort()
	auo.mutation.SetPort(i)
	return auo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillablePort(i *int) *AssetUpdateOne {
	if i != nil {
		auo.SetPort(*i)
	}
	return auo
}

// AddPort adds i to the "port" field.
func (auo *AssetUpdateOne) AddPort(i int) *AssetUpdateOne {
	auo.mutation.AddPort(i)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AssetUpdateOne) SetCreatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCreatedAt(t *time.Time) *AssetUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableUpdatedAt(t *time.Time) *AssetUpdateOne {
	if t != nil {
		auo.SetUpdatedAt(*t)
	}
	return auo
}

// AddGroupIDs adds the "groups" edge to the AssetGroup entity by IDs.
func (auo *AssetUpdateOne) AddGroupIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.AddGroupIDs(ids...)
	return auo
}

// AddGroups adds the "groups" edges to the AssetGroup entity.
func (auo *AssetUpdateOne) AddGroups(a ...*AssetGroup) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddGroupIDs(ids...)
}

// AddCredentialIDs adds the "credentials" edge to the Credential entity by IDs.
func (auo *AssetUpdateOne) AddCredentialIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.AddCredentialIDs(ids...)
	return auo
}

// AddCredentials adds the "credentials" edges to the Credential entity.
func (auo *AssetUpdateOne) AddCredentials(c ...*Credential) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCredentialIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearGroups clears all "groups" edges to the AssetGroup entity.
func (auo *AssetUpdateOne) ClearGroups() *AssetUpdateOne {
	auo.mutation.ClearGroups()
	return auo
}

// RemoveGroupIDs removes the "groups" edge to AssetGroup entities by IDs.
func (auo *AssetUpdateOne) RemoveGroupIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.RemoveGroupIDs(ids...)
	return auo
}

// RemoveGroups removes "groups" edges to AssetGroup entities.
func (auo *AssetUpdateOne) RemoveGroups(a ...*AssetGroup) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveGroupIDs(ids...)
}

// ClearCredentials clears all "credentials" edges to the Credential entity.
func (auo *AssetUpdateOne) ClearCredentials() *AssetUpdateOne {
	auo.mutation.ClearCredentials()
	return auo
}

// RemoveCredentialIDs removes the "credentials" edge to Credential entities by IDs.
func (auo *AssetUpdateOne) RemoveCredentialIDs(ids ...uuid.UUID) *AssetUpdateOne {
	auo.mutation.RemoveCredentialIDs(ids...)
	return auo
}

// RemoveCredentials removes "credentials" edges to Credential entities.
func (auo *AssetUpdateOne) RemoveCredentials(c ...*Credential) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCredentialIDs(ids...)
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(asset.FieldType, field.TypeString, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.IP(); ok {
		_spec.SetField(asset.FieldIP, field.TypeString, value)
	}
	if value, ok := auo.mutation.Port(); ok {
		_spec.SetField(asset.FieldPort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedPort(); ok {
		_spec.AddField(asset.FieldPort, field.TypeInt, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(asset.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !auo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.GroupsTable,
			Columns: asset.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCredentialsIDs(); len(nodes) > 0 && !auo.mutation.CredentialsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CredentialsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.CredentialsTable,
			Columns: []string{asset.CredentialsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(credential.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
