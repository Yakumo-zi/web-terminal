// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/asset"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroupattribute"
	"github.com/Yakumo-zi/web-terminal/ent/predicate"
	"github.com/google/uuid"
)

// AssetGroupUpdate is the builder for updating AssetGroup entities.
type AssetGroupUpdate struct {
	config
	hooks    []Hook
	mutation *AssetGroupMutation
}

// Where appends a list predicates to the AssetGroupUpdate builder.
func (agu *AssetGroupUpdate) Where(ps ...predicate.AssetGroup) *AssetGroupUpdate {
	agu.mutation.Where(ps...)
	return agu
}

// SetName sets the "name" field.
func (agu *AssetGroupUpdate) SetName(s string) *AssetGroupUpdate {
	agu.mutation.SetName(s)
	return agu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (agu *AssetGroupUpdate) SetNillableName(s *string) *AssetGroupUpdate {
	if s != nil {
		agu.SetName(*s)
	}
	return agu
}

// SetCreatedAt sets the "created_at" field.
func (agu *AssetGroupUpdate) SetCreatedAt(t time.Time) *AssetGroupUpdate {
	agu.mutation.SetCreatedAt(t)
	return agu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agu *AssetGroupUpdate) SetNillableCreatedAt(t *time.Time) *AssetGroupUpdate {
	if t != nil {
		agu.SetCreatedAt(*t)
	}
	return agu
}

// SetUpdatedAt sets the "updated_at" field.
func (agu *AssetGroupUpdate) SetUpdatedAt(t time.Time) *AssetGroupUpdate {
	agu.mutation.SetUpdatedAt(t)
	return agu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agu *AssetGroupUpdate) SetNillableUpdatedAt(t *time.Time) *AssetGroupUpdate {
	if t != nil {
		agu.SetUpdatedAt(*t)
	}
	return agu
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (agu *AssetGroupUpdate) AddAssetIDs(ids ...uuid.UUID) *AssetGroupUpdate {
	agu.mutation.AddAssetIDs(ids...)
	return agu
}

// AddAssets adds the "assets" edges to the Asset entity.
func (agu *AssetGroupUpdate) AddAssets(a ...*Asset) *AssetGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return agu.AddAssetIDs(ids...)
}

// AddAttrIDs adds the "attrs" edge to the AssetGroupAttribute entity by IDs.
func (agu *AssetGroupUpdate) AddAttrIDs(ids ...uuid.UUID) *AssetGroupUpdate {
	agu.mutation.AddAttrIDs(ids...)
	return agu
}

// AddAttrs adds the "attrs" edges to the AssetGroupAttribute entity.
func (agu *AssetGroupUpdate) AddAttrs(a ...*AssetGroupAttribute) *AssetGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return agu.AddAttrIDs(ids...)
}

// Mutation returns the AssetGroupMutation object of the builder.
func (agu *AssetGroupUpdate) Mutation() *AssetGroupMutation {
	return agu.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (agu *AssetGroupUpdate) ClearAssets() *AssetGroupUpdate {
	agu.mutation.ClearAssets()
	return agu
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (agu *AssetGroupUpdate) RemoveAssetIDs(ids ...uuid.UUID) *AssetGroupUpdate {
	agu.mutation.RemoveAssetIDs(ids...)
	return agu
}

// RemoveAssets removes "assets" edges to Asset entities.
func (agu *AssetGroupUpdate) RemoveAssets(a ...*Asset) *AssetGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return agu.RemoveAssetIDs(ids...)
}

// ClearAttrs clears all "attrs" edges to the AssetGroupAttribute entity.
func (agu *AssetGroupUpdate) ClearAttrs() *AssetGroupUpdate {
	agu.mutation.ClearAttrs()
	return agu
}

// RemoveAttrIDs removes the "attrs" edge to AssetGroupAttribute entities by IDs.
func (agu *AssetGroupUpdate) RemoveAttrIDs(ids ...uuid.UUID) *AssetGroupUpdate {
	agu.mutation.RemoveAttrIDs(ids...)
	return agu
}

// RemoveAttrs removes "attrs" edges to AssetGroupAttribute entities.
func (agu *AssetGroupUpdate) RemoveAttrs(a ...*AssetGroupAttribute) *AssetGroupUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return agu.RemoveAttrIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agu *AssetGroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agu.sqlSave, agu.mutation, agu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agu *AssetGroupUpdate) SaveX(ctx context.Context) int {
	affected, err := agu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agu *AssetGroupUpdate) Exec(ctx context.Context) error {
	_, err := agu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agu *AssetGroupUpdate) ExecX(ctx context.Context) {
	if err := agu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agu *AssetGroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetgroup.Table, assetgroup.Columns, sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID))
	if ps := agu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agu.mutation.Name(); ok {
		_spec.SetField(assetgroup.FieldName, field.TypeString, value)
	}
	if value, ok := agu.mutation.CreatedAt(); ok {
		_spec.SetField(assetgroup.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := agu.mutation.UpdatedAt(); ok {
		_spec.SetField(assetgroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if agu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !agu.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if agu.mutation.AttrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.RemovedAttrsIDs(); len(nodes) > 0 && !agu.mutation.AttrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agu.mutation.AttrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agu.mutation.done = true
	return n, nil
}

// AssetGroupUpdateOne is the builder for updating a single AssetGroup entity.
type AssetGroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetGroupMutation
}

// SetName sets the "name" field.
func (aguo *AssetGroupUpdateOne) SetName(s string) *AssetGroupUpdateOne {
	aguo.mutation.SetName(s)
	return aguo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aguo *AssetGroupUpdateOne) SetNillableName(s *string) *AssetGroupUpdateOne {
	if s != nil {
		aguo.SetName(*s)
	}
	return aguo
}

// SetCreatedAt sets the "created_at" field.
func (aguo *AssetGroupUpdateOne) SetCreatedAt(t time.Time) *AssetGroupUpdateOne {
	aguo.mutation.SetCreatedAt(t)
	return aguo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aguo *AssetGroupUpdateOne) SetNillableCreatedAt(t *time.Time) *AssetGroupUpdateOne {
	if t != nil {
		aguo.SetCreatedAt(*t)
	}
	return aguo
}

// SetUpdatedAt sets the "updated_at" field.
func (aguo *AssetGroupUpdateOne) SetUpdatedAt(t time.Time) *AssetGroupUpdateOne {
	aguo.mutation.SetUpdatedAt(t)
	return aguo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aguo *AssetGroupUpdateOne) SetNillableUpdatedAt(t *time.Time) *AssetGroupUpdateOne {
	if t != nil {
		aguo.SetUpdatedAt(*t)
	}
	return aguo
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (aguo *AssetGroupUpdateOne) AddAssetIDs(ids ...uuid.UUID) *AssetGroupUpdateOne {
	aguo.mutation.AddAssetIDs(ids...)
	return aguo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (aguo *AssetGroupUpdateOne) AddAssets(a ...*Asset) *AssetGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aguo.AddAssetIDs(ids...)
}

// AddAttrIDs adds the "attrs" edge to the AssetGroupAttribute entity by IDs.
func (aguo *AssetGroupUpdateOne) AddAttrIDs(ids ...uuid.UUID) *AssetGroupUpdateOne {
	aguo.mutation.AddAttrIDs(ids...)
	return aguo
}

// AddAttrs adds the "attrs" edges to the AssetGroupAttribute entity.
func (aguo *AssetGroupUpdateOne) AddAttrs(a ...*AssetGroupAttribute) *AssetGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aguo.AddAttrIDs(ids...)
}

// Mutation returns the AssetGroupMutation object of the builder.
func (aguo *AssetGroupUpdateOne) Mutation() *AssetGroupMutation {
	return aguo.mutation
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (aguo *AssetGroupUpdateOne) ClearAssets() *AssetGroupUpdateOne {
	aguo.mutation.ClearAssets()
	return aguo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (aguo *AssetGroupUpdateOne) RemoveAssetIDs(ids ...uuid.UUID) *AssetGroupUpdateOne {
	aguo.mutation.RemoveAssetIDs(ids...)
	return aguo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (aguo *AssetGroupUpdateOne) RemoveAssets(a ...*Asset) *AssetGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aguo.RemoveAssetIDs(ids...)
}

// ClearAttrs clears all "attrs" edges to the AssetGroupAttribute entity.
func (aguo *AssetGroupUpdateOne) ClearAttrs() *AssetGroupUpdateOne {
	aguo.mutation.ClearAttrs()
	return aguo
}

// RemoveAttrIDs removes the "attrs" edge to AssetGroupAttribute entities by IDs.
func (aguo *AssetGroupUpdateOne) RemoveAttrIDs(ids ...uuid.UUID) *AssetGroupUpdateOne {
	aguo.mutation.RemoveAttrIDs(ids...)
	return aguo
}

// RemoveAttrs removes "attrs" edges to AssetGroupAttribute entities.
func (aguo *AssetGroupUpdateOne) RemoveAttrs(a ...*AssetGroupAttribute) *AssetGroupUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aguo.RemoveAttrIDs(ids...)
}

// Where appends a list predicates to the AssetGroupUpdate builder.
func (aguo *AssetGroupUpdateOne) Where(ps ...predicate.AssetGroup) *AssetGroupUpdateOne {
	aguo.mutation.Where(ps...)
	return aguo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aguo *AssetGroupUpdateOne) Select(field string, fields ...string) *AssetGroupUpdateOne {
	aguo.fields = append([]string{field}, fields...)
	return aguo
}

// Save executes the query and returns the updated AssetGroup entity.
func (aguo *AssetGroupUpdateOne) Save(ctx context.Context) (*AssetGroup, error) {
	return withHooks(ctx, aguo.sqlSave, aguo.mutation, aguo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aguo *AssetGroupUpdateOne) SaveX(ctx context.Context) *AssetGroup {
	node, err := aguo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aguo *AssetGroupUpdateOne) Exec(ctx context.Context) error {
	_, err := aguo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aguo *AssetGroupUpdateOne) ExecX(ctx context.Context) {
	if err := aguo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aguo *AssetGroupUpdateOne) sqlSave(ctx context.Context) (_node *AssetGroup, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetgroup.Table, assetgroup.Columns, sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID))
	id, ok := aguo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetGroup.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aguo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetgroup.FieldID)
		for _, f := range fields {
			if !assetgroup.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetgroup.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aguo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aguo.mutation.Name(); ok {
		_spec.SetField(assetgroup.FieldName, field.TypeString, value)
	}
	if value, ok := aguo.mutation.CreatedAt(); ok {
		_spec.SetField(assetgroup.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aguo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetgroup.FieldUpdatedAt, field.TypeTime, value)
	}
	if aguo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !aguo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assetgroup.AssetsTable,
			Columns: assetgroup.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aguo.mutation.AttrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.RemovedAttrsIDs(); len(nodes) > 0 && !aguo.mutation.AttrsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aguo.mutation.AttrsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assetgroup.AttrsTable,
			Columns: []string{assetgroup.AttrsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssetGroup{config: aguo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aguo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetgroup.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aguo.mutation.done = true
	return _node, nil
}
