// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroupattribute"
	"github.com/google/uuid"
)

// AssetGroupAttributeCreate is the builder for creating a AssetGroupAttribute entity.
type AssetGroupAttributeCreate struct {
	config
	mutation *AssetGroupAttributeMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (agac *AssetGroupAttributeCreate) SetKey(s string) *AssetGroupAttributeCreate {
	agac.mutation.SetKey(s)
	return agac
}

// SetValue sets the "value" field.
func (agac *AssetGroupAttributeCreate) SetValue(s string) *AssetGroupAttributeCreate {
	agac.mutation.SetValue(s)
	return agac
}

// SetType sets the "type" field.
func (agac *AssetGroupAttributeCreate) SetType(s string) *AssetGroupAttributeCreate {
	agac.mutation.SetType(s)
	return agac
}

// SetCreatedAt sets the "created_at" field.
func (agac *AssetGroupAttributeCreate) SetCreatedAt(t time.Time) *AssetGroupAttributeCreate {
	agac.mutation.SetCreatedAt(t)
	return agac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agac *AssetGroupAttributeCreate) SetNillableCreatedAt(t *time.Time) *AssetGroupAttributeCreate {
	if t != nil {
		agac.SetCreatedAt(*t)
	}
	return agac
}

// SetUpdatedAt sets the "updated_at" field.
func (agac *AssetGroupAttributeCreate) SetUpdatedAt(t time.Time) *AssetGroupAttributeCreate {
	agac.mutation.SetUpdatedAt(t)
	return agac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agac *AssetGroupAttributeCreate) SetNillableUpdatedAt(t *time.Time) *AssetGroupAttributeCreate {
	if t != nil {
		agac.SetUpdatedAt(*t)
	}
	return agac
}

// SetID sets the "id" field.
func (agac *AssetGroupAttributeCreate) SetID(u uuid.UUID) *AssetGroupAttributeCreate {
	agac.mutation.SetID(u)
	return agac
}

// SetGroupID sets the "group" edge to the AssetGroup entity by ID.
func (agac *AssetGroupAttributeCreate) SetGroupID(id uuid.UUID) *AssetGroupAttributeCreate {
	agac.mutation.SetGroupID(id)
	return agac
}

// SetNillableGroupID sets the "group" edge to the AssetGroup entity by ID if the given value is not nil.
func (agac *AssetGroupAttributeCreate) SetNillableGroupID(id *uuid.UUID) *AssetGroupAttributeCreate {
	if id != nil {
		agac = agac.SetGroupID(*id)
	}
	return agac
}

// SetGroup sets the "group" edge to the AssetGroup entity.
func (agac *AssetGroupAttributeCreate) SetGroup(a *AssetGroup) *AssetGroupAttributeCreate {
	return agac.SetGroupID(a.ID)
}

// Mutation returns the AssetGroupAttributeMutation object of the builder.
func (agac *AssetGroupAttributeCreate) Mutation() *AssetGroupAttributeMutation {
	return agac.mutation
}

// Save creates the AssetGroupAttribute in the database.
func (agac *AssetGroupAttributeCreate) Save(ctx context.Context) (*AssetGroupAttribute, error) {
	if err := agac.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, agac.sqlSave, agac.mutation, agac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (agac *AssetGroupAttributeCreate) SaveX(ctx context.Context) *AssetGroupAttribute {
	v, err := agac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agac *AssetGroupAttributeCreate) Exec(ctx context.Context) error {
	_, err := agac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agac *AssetGroupAttributeCreate) ExecX(ctx context.Context) {
	if err := agac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (agac *AssetGroupAttributeCreate) defaults() error {
	if _, ok := agac.mutation.CreatedAt(); !ok {
		if assetgroupattribute.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetgroupattribute.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := assetgroupattribute.DefaultCreatedAt()
		agac.mutation.SetCreatedAt(v)
	}
	if _, ok := agac.mutation.UpdatedAt(); !ok {
		if assetgroupattribute.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized assetgroupattribute.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := assetgroupattribute.DefaultUpdatedAt()
		agac.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (agac *AssetGroupAttributeCreate) check() error {
	if _, ok := agac.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "AssetGroupAttribute.key"`)}
	}
	if _, ok := agac.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AssetGroupAttribute.value"`)}
	}
	if _, ok := agac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AssetGroupAttribute.type"`)}
	}
	if _, ok := agac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AssetGroupAttribute.created_at"`)}
	}
	if _, ok := agac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AssetGroupAttribute.updated_at"`)}
	}
	return nil
}

func (agac *AssetGroupAttributeCreate) sqlSave(ctx context.Context) (*AssetGroupAttribute, error) {
	if err := agac.check(); err != nil {
		return nil, err
	}
	_node, _spec := agac.createSpec()
	if err := sqlgraph.CreateNode(ctx, agac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	agac.mutation.id = &_node.ID
	agac.mutation.done = true
	return _node, nil
}

func (agac *AssetGroupAttributeCreate) createSpec() (*AssetGroupAttribute, *sqlgraph.CreateSpec) {
	var (
		_node = &AssetGroupAttribute{config: agac.config}
		_spec = sqlgraph.NewCreateSpec(assetgroupattribute.Table, sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID))
	)
	if id, ok := agac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := agac.mutation.Key(); ok {
		_spec.SetField(assetgroupattribute.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := agac.mutation.Value(); ok {
		_spec.SetField(assetgroupattribute.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := agac.mutation.GetType(); ok {
		_spec.SetField(assetgroupattribute.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := agac.mutation.CreatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := agac.mutation.UpdatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := agac.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetgroupattribute.GroupTable,
			Columns: []string{assetgroupattribute.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.asset_group_attrs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AssetGroupAttributeCreateBulk is the builder for creating many AssetGroupAttribute entities in bulk.
type AssetGroupAttributeCreateBulk struct {
	config
	err      error
	builders []*AssetGroupAttributeCreate
}

// Save creates the AssetGroupAttribute entities in the database.
func (agacb *AssetGroupAttributeCreateBulk) Save(ctx context.Context) ([]*AssetGroupAttribute, error) {
	if agacb.err != nil {
		return nil, agacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(agacb.builders))
	nodes := make([]*AssetGroupAttribute, len(agacb.builders))
	mutators := make([]Mutator, len(agacb.builders))
	for i := range agacb.builders {
		func(i int, root context.Context) {
			builder := agacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssetGroupAttributeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, agacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, agacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, agacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (agacb *AssetGroupAttributeCreateBulk) SaveX(ctx context.Context) []*AssetGroupAttribute {
	v, err := agacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (agacb *AssetGroupAttributeCreateBulk) Exec(ctx context.Context) error {
	_, err := agacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agacb *AssetGroupAttributeCreateBulk) ExecX(ctx context.Context) {
	if err := agacb.Exec(ctx); err != nil {
		panic(err)
	}
}
