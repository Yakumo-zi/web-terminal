// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroupattribute"
	"github.com/google/uuid"
)

// AssetGroupAttribute is the model entity for the AssetGroupAttribute schema.
type AssetGroupAttribute struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetGroupAttributeQuery when eager-loading is set.
	Edges             AssetGroupAttributeEdges `json:"edges"`
	asset_group_attrs *uuid.UUID
	selectValues      sql.SelectValues
}

// AssetGroupAttributeEdges holds the relations/edges for other nodes in the graph.
type AssetGroupAttributeEdges struct {
	// Group holds the value of the group edge.
	Group *AssetGroup `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssetGroupAttributeEdges) GroupOrErr() (*AssetGroup, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: assetgroup.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetGroupAttribute) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetgroupattribute.FieldID:
			values[i] = new(sql.NullInt64)
		case assetgroupattribute.FieldKey, assetgroupattribute.FieldValue, assetgroupattribute.FieldType:
			values[i] = new(sql.NullString)
		case assetgroupattribute.FieldCreatedAt, assetgroupattribute.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case assetgroupattribute.ForeignKeys[0]: // asset_group_attrs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetGroupAttribute fields.
func (aga *AssetGroupAttribute) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetgroupattribute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aga.ID = int(value.Int64)
		case assetgroupattribute.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				aga.Key = value.String
			}
		case assetgroupattribute.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				aga.Value = value.String
			}
		case assetgroupattribute.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				aga.Type = value.String
			}
		case assetgroupattribute.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				aga.CreatedAt = value.Time
			}
		case assetgroupattribute.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				aga.UpdatedAt = value.Time
			}
		case assetgroupattribute.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field asset_group_attrs", values[i])
			} else if value.Valid {
				aga.asset_group_attrs = new(uuid.UUID)
				*aga.asset_group_attrs = *value.S.(*uuid.UUID)
			}
		default:
			aga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AssetGroupAttribute.
// This includes values selected through modifiers, order, etc.
func (aga *AssetGroupAttribute) GetValue(name string) (ent.Value, error) {
	return aga.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the AssetGroupAttribute entity.
func (aga *AssetGroupAttribute) QueryGroup() *AssetGroupQuery {
	return NewAssetGroupAttributeClient(aga.config).QueryGroup(aga)
}

// Update returns a builder for updating this AssetGroupAttribute.
// Note that you need to call AssetGroupAttribute.Unwrap() before calling this method if this AssetGroupAttribute
// was returned from a transaction, and the transaction was committed or rolled back.
func (aga *AssetGroupAttribute) Update() *AssetGroupAttributeUpdateOne {
	return NewAssetGroupAttributeClient(aga.config).UpdateOne(aga)
}

// Unwrap unwraps the AssetGroupAttribute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aga *AssetGroupAttribute) Unwrap() *AssetGroupAttribute {
	_tx, ok := aga.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetGroupAttribute is not a transactional entity")
	}
	aga.config.driver = _tx.drv
	return aga
}

// String implements the fmt.Stringer.
func (aga *AssetGroupAttribute) String() string {
	var builder strings.Builder
	builder.WriteString("AssetGroupAttribute(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aga.ID))
	builder.WriteString("key=")
	builder.WriteString(aga.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(aga.Value)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(aga.Type)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(aga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(aga.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AssetGroupAttributes is a parsable slice of AssetGroupAttribute.
type AssetGroupAttributes []*AssetGroupAttribute
