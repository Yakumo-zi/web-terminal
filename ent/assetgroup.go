// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/google/uuid"
)

// AssetGroup is the model entity for the AssetGroup schema.
type AssetGroup struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssetGroupQuery when eager-loading is set.
	Edges        AssetGroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssetGroupEdges holds the relations/edges for other nodes in the graph.
type AssetGroupEdges struct {
	// Assets holds the value of the assets edge.
	Assets []*Asset `json:"assets,omitempty"`
	// Attrs holds the value of the attrs edge.
	Attrs []*AssetGroupAttribute `json:"attrs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AssetsOrErr returns the Assets value or an error if the edge
// was not loaded in eager-loading.
func (e AssetGroupEdges) AssetsOrErr() ([]*Asset, error) {
	if e.loadedTypes[0] {
		return e.Assets, nil
	}
	return nil, &NotLoadedError{edge: "assets"}
}

// AttrsOrErr returns the Attrs value or an error if the edge
// was not loaded in eager-loading.
func (e AssetGroupEdges) AttrsOrErr() ([]*AssetGroupAttribute, error) {
	if e.loadedTypes[1] {
		return e.Attrs, nil
	}
	return nil, &NotLoadedError{edge: "attrs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssetGroup) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assetgroup.FieldName:
			values[i] = new(sql.NullString)
		case assetgroup.FieldCreatedAt, assetgroup.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case assetgroup.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssetGroup fields.
func (ag *AssetGroup) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assetgroup.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ag.ID = *value
			}
		case assetgroup.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ag.Name = value.String
			}
		case assetgroup.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ag.CreatedAt = value.Time
			}
		case assetgroup.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ag.UpdatedAt = value.Time
			}
		default:
			ag.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssetGroup.
// This includes values selected through modifiers, order, etc.
func (ag *AssetGroup) Value(name string) (ent.Value, error) {
	return ag.selectValues.Get(name)
}

// QueryAssets queries the "assets" edge of the AssetGroup entity.
func (ag *AssetGroup) QueryAssets() *AssetQuery {
	return NewAssetGroupClient(ag.config).QueryAssets(ag)
}

// QueryAttrs queries the "attrs" edge of the AssetGroup entity.
func (ag *AssetGroup) QueryAttrs() *AssetGroupAttributeQuery {
	return NewAssetGroupClient(ag.config).QueryAttrs(ag)
}

// Update returns a builder for updating this AssetGroup.
// Note that you need to call AssetGroup.Unwrap() before calling this method if this AssetGroup
// was returned from a transaction, and the transaction was committed or rolled back.
func (ag *AssetGroup) Update() *AssetGroupUpdateOne {
	return NewAssetGroupClient(ag.config).UpdateOne(ag)
}

// Unwrap unwraps the AssetGroup entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ag *AssetGroup) Unwrap() *AssetGroup {
	_tx, ok := ag.config.driver.(*txDriver)
	if !ok {
		panic("ent: AssetGroup is not a transactional entity")
	}
	ag.config.driver = _tx.drv
	return ag
}

// String implements the fmt.Stringer.
func (ag *AssetGroup) String() string {
	var builder strings.Builder
	builder.WriteString("AssetGroup(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ag.ID))
	builder.WriteString("name=")
	builder.WriteString(ag.Name)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ag.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ag.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AssetGroups is a parsable slice of AssetGroup.
type AssetGroups []*AssetGroup
