// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroup"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroupattribute"
	"github.com/Yakumo-zi/web-terminal/ent/predicate"
	"github.com/google/uuid"
)

// AssetGroupAttributeUpdate is the builder for updating AssetGroupAttribute entities.
type AssetGroupAttributeUpdate struct {
	config
	hooks    []Hook
	mutation *AssetGroupAttributeMutation
}

// Where appends a list predicates to the AssetGroupAttributeUpdate builder.
func (agau *AssetGroupAttributeUpdate) Where(ps ...predicate.AssetGroupAttribute) *AssetGroupAttributeUpdate {
	agau.mutation.Where(ps...)
	return agau
}

// SetKey sets the "key" field.
func (agau *AssetGroupAttributeUpdate) SetKey(s string) *AssetGroupAttributeUpdate {
	agau.mutation.SetKey(s)
	return agau
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableKey(s *string) *AssetGroupAttributeUpdate {
	if s != nil {
		agau.SetKey(*s)
	}
	return agau
}

// SetValue sets the "value" field.
func (agau *AssetGroupAttributeUpdate) SetValue(s string) *AssetGroupAttributeUpdate {
	agau.mutation.SetValue(s)
	return agau
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableValue(s *string) *AssetGroupAttributeUpdate {
	if s != nil {
		agau.SetValue(*s)
	}
	return agau
}

// SetType sets the "type" field.
func (agau *AssetGroupAttributeUpdate) SetType(s string) *AssetGroupAttributeUpdate {
	agau.mutation.SetType(s)
	return agau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableType(s *string) *AssetGroupAttributeUpdate {
	if s != nil {
		agau.SetType(*s)
	}
	return agau
}

// SetCreatedAt sets the "created_at" field.
func (agau *AssetGroupAttributeUpdate) SetCreatedAt(t time.Time) *AssetGroupAttributeUpdate {
	agau.mutation.SetCreatedAt(t)
	return agau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableCreatedAt(t *time.Time) *AssetGroupAttributeUpdate {
	if t != nil {
		agau.SetCreatedAt(*t)
	}
	return agau
}

// SetUpdatedAt sets the "updated_at" field.
func (agau *AssetGroupAttributeUpdate) SetUpdatedAt(t time.Time) *AssetGroupAttributeUpdate {
	agau.mutation.SetUpdatedAt(t)
	return agau
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableUpdatedAt(t *time.Time) *AssetGroupAttributeUpdate {
	if t != nil {
		agau.SetUpdatedAt(*t)
	}
	return agau
}

// SetGroupID sets the "group" edge to the AssetGroup entity by ID.
func (agau *AssetGroupAttributeUpdate) SetGroupID(id uuid.UUID) *AssetGroupAttributeUpdate {
	agau.mutation.SetGroupID(id)
	return agau
}

// SetNillableGroupID sets the "group" edge to the AssetGroup entity by ID if the given value is not nil.
func (agau *AssetGroupAttributeUpdate) SetNillableGroupID(id *uuid.UUID) *AssetGroupAttributeUpdate {
	if id != nil {
		agau = agau.SetGroupID(*id)
	}
	return agau
}

// SetGroup sets the "group" edge to the AssetGroup entity.
func (agau *AssetGroupAttributeUpdate) SetGroup(a *AssetGroup) *AssetGroupAttributeUpdate {
	return agau.SetGroupID(a.ID)
}

// Mutation returns the AssetGroupAttributeMutation object of the builder.
func (agau *AssetGroupAttributeUpdate) Mutation() *AssetGroupAttributeMutation {
	return agau.mutation
}

// ClearGroup clears the "group" edge to the AssetGroup entity.
func (agau *AssetGroupAttributeUpdate) ClearGroup() *AssetGroupAttributeUpdate {
	agau.mutation.ClearGroup()
	return agau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (agau *AssetGroupAttributeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, agau.sqlSave, agau.mutation, agau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agau *AssetGroupAttributeUpdate) SaveX(ctx context.Context) int {
	affected, err := agau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (agau *AssetGroupAttributeUpdate) Exec(ctx context.Context) error {
	_, err := agau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agau *AssetGroupAttributeUpdate) ExecX(ctx context.Context) {
	if err := agau.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agau *AssetGroupAttributeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetgroupattribute.Table, assetgroupattribute.Columns, sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeInt))
	if ps := agau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agau.mutation.Key(); ok {
		_spec.SetField(assetgroupattribute.FieldKey, field.TypeString, value)
	}
	if value, ok := agau.mutation.Value(); ok {
		_spec.SetField(assetgroupattribute.FieldValue, field.TypeString, value)
	}
	if value, ok := agau.mutation.GetType(); ok {
		_spec.SetField(assetgroupattribute.FieldType, field.TypeString, value)
	}
	if value, ok := agau.mutation.CreatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := agau.mutation.UpdatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if agau.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetgroupattribute.GroupTable,
			Columns: []string{assetgroupattribute.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agau.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetgroupattribute.GroupTable,
			Columns: []string{assetgroupattribute.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, agau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetgroupattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	agau.mutation.done = true
	return n, nil
}

// AssetGroupAttributeUpdateOne is the builder for updating a single AssetGroupAttribute entity.
type AssetGroupAttributeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetGroupAttributeMutation
}

// SetKey sets the "key" field.
func (agauo *AssetGroupAttributeUpdateOne) SetKey(s string) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetKey(s)
	return agauo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableKey(s *string) *AssetGroupAttributeUpdateOne {
	if s != nil {
		agauo.SetKey(*s)
	}
	return agauo
}

// SetValue sets the "value" field.
func (agauo *AssetGroupAttributeUpdateOne) SetValue(s string) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetValue(s)
	return agauo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableValue(s *string) *AssetGroupAttributeUpdateOne {
	if s != nil {
		agauo.SetValue(*s)
	}
	return agauo
}

// SetType sets the "type" field.
func (agauo *AssetGroupAttributeUpdateOne) SetType(s string) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetType(s)
	return agauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableType(s *string) *AssetGroupAttributeUpdateOne {
	if s != nil {
		agauo.SetType(*s)
	}
	return agauo
}

// SetCreatedAt sets the "created_at" field.
func (agauo *AssetGroupAttributeUpdateOne) SetCreatedAt(t time.Time) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetCreatedAt(t)
	return agauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableCreatedAt(t *time.Time) *AssetGroupAttributeUpdateOne {
	if t != nil {
		agauo.SetCreatedAt(*t)
	}
	return agauo
}

// SetUpdatedAt sets the "updated_at" field.
func (agauo *AssetGroupAttributeUpdateOne) SetUpdatedAt(t time.Time) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetUpdatedAt(t)
	return agauo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableUpdatedAt(t *time.Time) *AssetGroupAttributeUpdateOne {
	if t != nil {
		agauo.SetUpdatedAt(*t)
	}
	return agauo
}

// SetGroupID sets the "group" edge to the AssetGroup entity by ID.
func (agauo *AssetGroupAttributeUpdateOne) SetGroupID(id uuid.UUID) *AssetGroupAttributeUpdateOne {
	agauo.mutation.SetGroupID(id)
	return agauo
}

// SetNillableGroupID sets the "group" edge to the AssetGroup entity by ID if the given value is not nil.
func (agauo *AssetGroupAttributeUpdateOne) SetNillableGroupID(id *uuid.UUID) *AssetGroupAttributeUpdateOne {
	if id != nil {
		agauo = agauo.SetGroupID(*id)
	}
	return agauo
}

// SetGroup sets the "group" edge to the AssetGroup entity.
func (agauo *AssetGroupAttributeUpdateOne) SetGroup(a *AssetGroup) *AssetGroupAttributeUpdateOne {
	return agauo.SetGroupID(a.ID)
}

// Mutation returns the AssetGroupAttributeMutation object of the builder.
func (agauo *AssetGroupAttributeUpdateOne) Mutation() *AssetGroupAttributeMutation {
	return agauo.mutation
}

// ClearGroup clears the "group" edge to the AssetGroup entity.
func (agauo *AssetGroupAttributeUpdateOne) ClearGroup() *AssetGroupAttributeUpdateOne {
	agauo.mutation.ClearGroup()
	return agauo
}

// Where appends a list predicates to the AssetGroupAttributeUpdate builder.
func (agauo *AssetGroupAttributeUpdateOne) Where(ps ...predicate.AssetGroupAttribute) *AssetGroupAttributeUpdateOne {
	agauo.mutation.Where(ps...)
	return agauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (agauo *AssetGroupAttributeUpdateOne) Select(field string, fields ...string) *AssetGroupAttributeUpdateOne {
	agauo.fields = append([]string{field}, fields...)
	return agauo
}

// Save executes the query and returns the updated AssetGroupAttribute entity.
func (agauo *AssetGroupAttributeUpdateOne) Save(ctx context.Context) (*AssetGroupAttribute, error) {
	return withHooks(ctx, agauo.sqlSave, agauo.mutation, agauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (agauo *AssetGroupAttributeUpdateOne) SaveX(ctx context.Context) *AssetGroupAttribute {
	node, err := agauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (agauo *AssetGroupAttributeUpdateOne) Exec(ctx context.Context) error {
	_, err := agauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (agauo *AssetGroupAttributeUpdateOne) ExecX(ctx context.Context) {
	if err := agauo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (agauo *AssetGroupAttributeUpdateOne) sqlSave(ctx context.Context) (_node *AssetGroupAttribute, err error) {
	_spec := sqlgraph.NewUpdateSpec(assetgroupattribute.Table, assetgroupattribute.Columns, sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeInt))
	id, ok := agauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AssetGroupAttribute.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := agauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assetgroupattribute.FieldID)
		for _, f := range fields {
			if !assetgroupattribute.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != assetgroupattribute.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := agauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := agauo.mutation.Key(); ok {
		_spec.SetField(assetgroupattribute.FieldKey, field.TypeString, value)
	}
	if value, ok := agauo.mutation.Value(); ok {
		_spec.SetField(assetgroupattribute.FieldValue, field.TypeString, value)
	}
	if value, ok := agauo.mutation.GetType(); ok {
		_spec.SetField(assetgroupattribute.FieldType, field.TypeString, value)
	}
	if value, ok := agauo.mutation.CreatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := agauo.mutation.UpdatedAt(); ok {
		_spec.SetField(assetgroupattribute.FieldUpdatedAt, field.TypeTime, value)
	}
	if agauo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetgroupattribute.GroupTable,
			Columns: []string{assetgroupattribute.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := agauo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assetgroupattribute.GroupTable,
			Columns: []string{assetgroupattribute.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assetgroup.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AssetGroupAttribute{config: agauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, agauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assetgroupattribute.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	agauo.mutation.done = true
	return _node, nil
}
