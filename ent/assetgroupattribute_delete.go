// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Yakumo-zi/web-terminal/ent/assetgroupattribute"
	"github.com/Yakumo-zi/web-terminal/ent/predicate"
)

// AssetGroupAttributeDelete is the builder for deleting a AssetGroupAttribute entity.
type AssetGroupAttributeDelete struct {
	config
	hooks    []Hook
	mutation *AssetGroupAttributeMutation
}

// Where appends a list predicates to the AssetGroupAttributeDelete builder.
func (agad *AssetGroupAttributeDelete) Where(ps ...predicate.AssetGroupAttribute) *AssetGroupAttributeDelete {
	agad.mutation.Where(ps...)
	return agad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (agad *AssetGroupAttributeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, agad.sqlExec, agad.mutation, agad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (agad *AssetGroupAttributeDelete) ExecX(ctx context.Context) int {
	n, err := agad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (agad *AssetGroupAttributeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(assetgroupattribute.Table, sqlgraph.NewFieldSpec(assetgroupattribute.FieldID, field.TypeUUID))
	if ps := agad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, agad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	agad.mutation.done = true
	return affected, err
}

// AssetGroupAttributeDeleteOne is the builder for deleting a single AssetGroupAttribute entity.
type AssetGroupAttributeDeleteOne struct {
	agad *AssetGroupAttributeDelete
}

// Where appends a list predicates to the AssetGroupAttributeDelete builder.
func (agado *AssetGroupAttributeDeleteOne) Where(ps ...predicate.AssetGroupAttribute) *AssetGroupAttributeDeleteOne {
	agado.agad.mutation.Where(ps...)
	return agado
}

// Exec executes the deletion query.
func (agado *AssetGroupAttributeDeleteOne) Exec(ctx context.Context) error {
	n, err := agado.agad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{assetgroupattribute.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (agado *AssetGroupAttributeDeleteOne) ExecX(ctx context.Context) {
	if err := agado.Exec(ctx); err != nil {
		panic(err)
	}
}
